buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        maven { url = 'https://maven.parchmentmc.org' }
        mavenCentral()
        maven { url = 'https://repo.spongepowered.org/repository/maven-public/' }
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath 'org.parchmentmc:librarian:1.+'
        classpath group: 'org.spongepowered', name: 'mixingradle', version: '0.7-SNAPSHOT'
    }
}
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.parchmentmc.librarian.forgegradle'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'
apply plugin: 'org.spongepowered.mixin'

version = release_snapshot.toBoolean() ? "${mc_version}-${mod_version}-snapshot-${snapshot_version}" : "${mc_version}-${mod_version}"
group = 'standobyte.jojo'
archivesBaseName = 'JJBA-RipplesOfThePast'

java.toolchain.languageVersion = JavaLanguageVersion.of(8)

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
minecraft {
    mappings channel: 'parchment', version: "2022.03.06-1.16.5"
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${project.projectDir}/build/createSrgToMcp/output.srg"
            mods {
                jojo {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${project.projectDir}/build/createSrgToMcp/output.srg"
            mods {
                jojo {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            args '--mod', 'examplemod', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
            mods {
                jojo {
                    source sourceSets.main
                }
            }
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

mixin {
    add sourceSets.main, 'mixins.jojo.refmap.json'
    config 'mixins.jojo.json'
    
    debug.verbose = true
    debug.export = true
    dumpTargetOnFailure = true
}

repositories {
    maven {
        name "KosmX's maven"
        url 'https://maven.kosmx.dev/'
    }
    maven {
        // location of the maven that hosts JEI files since January 2023
        name = "Jared's maven"
        url = "https://maven.blamejared.com/"
    }
    maven {
        // location of a maven mirror for JEI files, as a fallback
        name = "ModMaven"
        url = "https://modmaven.dev"
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${mc_version}-${forge_version}"
    annotationProcessor 'org.spongepowered:mixin:0.8.4:processor'

    implementation fg.deobf("dev.kosmx.player-anim:player-animation-lib-forge:${playeranim_version}")
    implementation fg.deobf("io.github.kosmx.bendy-lib:bendy-lib-forge:${bendylib_version}")
    compileOnly 'org.jetbrains:annotations:23.0.0'
    
    implementation fg.deobf("mezz.jei:jei-${mc_version}:${jei_version}")
}

jar {
    manifest {
        attributes([
            "Specification-Title": "Ripples of the Past",
            "Specification-Vendor": "StandoByte",
            "Specification-Version": "1", 
            "Implementation-Title": "com.github.standobyte.jojo",
            "Implementation-Version": "${mod_version}",
            "Implementation-Vendor" :"StandoByte",
        ])
    }
}

// Example configuration to allow publishing using the maven-publish task
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar') 
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
//publish.dependsOn('reobfJar')

task srcJar (type: Jar) {
    from sourceSets.main.java
    classifier = 'sources'
}

artifacts {
    archives srcJar
}

tasks.withType(GenerateModuleMetadata) {
	// Gradle metadata generates with dependencies which causes an error, 
	// and I CBA to figure out how to fix it when this works
    enabled = false
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId project.group
            artifactId project.archivesBaseName
            version "${mc_version}-${mod_version}-snapshot-${snapshot_version}"
            from components.java
            artifact srcJar
            pom.withXml {
                def node = asNode()
                if (node.dependencies.size() > 0)
                    node.remove(node.dependencies) // Remove dependencies from .pom
            }
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}
